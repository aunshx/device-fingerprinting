
import json
import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report

# Load data from JSON file
with open('../data/extracted_component_data.json') as file:
    data = json.load(file)

# Prepare data for the model
platforms = []
features = []

for entry in data:
    platform = entry['components']['platform']['value']
    operation_output_str = entry['operationOutput'].strip('[]').split(', ')
    
    # Convert operationOutput to numerical values
    try:
        operation_output = list(map(float, operation_output_str))
    except ValueError as e:
        print(f"Error converting operationOutput to float: {e}")
        continue
    
    # Extract statistical features from operationOutput
    feature = [
        np.mean(operation_output),
        np.median(operation_output),
        np.std(operation_output),
        np.min(operation_output),
        np.max(operation_output)
    ]
    
    platforms.append(platform)
    features.append(feature)

# Create DataFrame
df = pd.DataFrame(features, columns=['mean', 'median', 'std', 'min', 'max'])
df['platform'] = platforms

# Encode target variable
platform_categories = df['platform'].astype('category').cat.categories
df['platform'] = df['platform'].astype('category').cat.codes

# Split data into training and testing sets
X = df.drop('platform', axis=1)
y = df['platform']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.05, random_state=42)

# Train a RandomForest model
clf = RandomForestClassifier(n_estimators=100, random_state=42)
clf.fit(X_train, y_train)

# Make predictions
y_pred = clf.predict(X_test)

# Evaluate the model
accuracy = accuracy_score(y_test, y_pred)
print(f'Accuracy: {accuracy:.2f}')
print(classification_report(y_test, y_pred))

# Function to predict platform from operationOutput with probabilities
def predict_platform_with_prob(operation_output):
    feature = [
        np.mean(operation_output),
        np.median(operation_output),
        np.std(operation_output),
        np.min(operation_output),
        np.max(operation_output)
    ]
    probabilities = clf.predict_proba([feature])[0]
    predicted_index = np.argmax(probabilities)
    predicted_platform = platform_categories[predicted_index]
    probability_percentage = probabilities[predicted_index] * 100
    return predicted_platform, probability_percentage, probabilities

# Example usage
example_output_str = "[16.580000519752502, 8.229999803006649, 279.8849996179342, 350.6549997255206, 292.9849997162819, 101.04000009596348, 159.41500011831522, 201.03499945253134, 501.8099993467331, 305.5149996653199, 181.94499984383583, 149.66499991714954, 51.19000002741814, 75.3600001335144, 22.07500021904707, 12.70500011742115, 301.5400003641844, 94.88500002771616, 85.85999999195337, 95.83000000566244, 28.634999878704548, 50.30999984592199, 47.805000096559525, 130.9799998998642, 24.304999969899654, 32.62499999254942, 97.43500035256147, 38.37999980896711, 59.85999945551157, 37.36000042408705, 41.965000331401825, 33.485000021755695, 466.0049993544817, 176.92000046372414, 107.02500026673079, 41.714999824762344, 202.25000008940697, 138.4500004351139, 169.66999974101782, 198.11000023037195, 139.24000039696693, 259.1650001704693, 356.1549996957183, 211.91499941051006, 251.94499921053648, 196.66500017046928, 353.00999972969294, 174.80000015348196, 243.69999952614307, 399.86000023782253, 356.9750003516674, 320.1299998909235, 128.4100003540516, 409.30499974638224, 441.78999960422516, 211.09999995678663, 333.6600000038743, 361.56999971717596, 624.5200000703335, 278.1250001862645, 254.12499997764826, 852.2049998864532, 366.0849994048476, 980.1050005480647, 318.3749997988343, 499.00499917566776, 52.029999904334545, 32.19499997794628, 19.24999989569187, 19.380000419914722, 73.09000007808208, 32.110000029206276, 164.43500015884638, 65.01000002026558, 98.06500002741814, 87.17499952763319, 86.35000046342611, 122.83500004559755, 103.40000037103891, 121.51999957859516, 65.5749998986721, 78.62500008195639, 181.24999944120646, 101.16999968886375, 87.4849995598197, 129.23000007867813, 84.03499983251095, 58.95499978214502, 32.27000031620264, 126.59499980509281, 40.90999998152256, 39.02000002563, 61.3000001758337, 40.710000321269035, 229.8399992287159, 29.160000383853912, 23.275000043213367, 9.649999439716339, 47.194999642670155, 35.01000069081783, 21.084999665617943, 65.74000045657158, 151.3900002464652, 24.55499954521656, 19.27500031888485, 38.805000483989716, 29.340000823140144, 34.78000033646822, 7.825000211596489, 47.05500043928623, 117.94000025838614, 50.92999991029501, 318.7299994751811, 537.5000005587935, 252.3800004273653, 169.7449991479516, 437.0800005272031, 112.08999995142221, 31.65999986231327, 146.4950004592538, 42.39500034600496, 48.68500027805567, 32.02500008046627, 117.39000026136637, 34.664999693632126, 30.53000010550022, 21.764999255537987, 205.59999998658895, 214.89000041037798, 156.4149996265769, 134.21500008553267, 4710.884999483824, 165.97000043839216, 494.67500019818544, 529.0149999782443, 60.57999935001135, 49.32500049471855, 22.71499950438738, 43.94000023603439, 242.5650004297495, 146.44999988377094, 152.74000074714422, 85.54000034928322, 41.354999877512455, 89.2749996855855, 65.90500008314848, 53.4699996933341, 265.6499994918704, 140.44000022113323, 71.78999949246645, 102.33000013977289, 382.9150004312396, 195.63999958336353, 357.4199993163347, 829.8300001770258, 33.245000056922436, 19.585000351071358, 45.80500070005655, 52.040000446140766, 28.869999572634697, 25.004999712109566, 32.054999843239784, 181.36999942362309, 299.57500007003546, 131.08500000089407, 6.285000592470169, 360.895000398159, 195.7449996843934, 275.41499957442284, 98.29999972134829, 478.93999982625246, 288.9599995687604, 77.36499980092049, 51.125000230968, 132.59500078856945, 89.40500020980835, 321.91500067710876, 240.84000010043383, 142.19999965280294, 338.8249995186925, 211.2050000578165, 323.4599996358156, 30.455000698566437, 107.74500016123056, 211.12999971956015, 68.08499991893768, 188.6399993672967, 594.9699999764562, 137.6050002872944, 183.89999959617853, 99.5049998164177, 112.86999937146902, 246.10000010579824, 149.41000007092953, 1844.8399994522333, 497.2000000998378, 738.820000551641, 1180.9550002217293, 177.36000008881092, 257.49999936670065, 242.66500025987625, 384.80500038713217, 100.16999952495098, 73.06999992579222, 340.52000008523464, 1149.205000139773, 444.52999997884035, 159.06000044196844, 581.5300000831485, 264.4800003618002, 173.0699995532632, 334.40000005066395, 401.719999499619, 178.22999972850084, 381.74999970942736, 131.90500065684319, 53.000000305473804, 214.37999978661537, 398.8800002261996, 87.90000062435865, 182.20499996095896, 263.4000005200505, 137.06499990075827, 399.7700000181794, 441.20500050485134, 155.84999974817038, 324.7700007632375, 122.61500023305416, 247.47500009834766, 167.3200000077486, 373.66999965161085, 289.8299992084503, 151.5000006183982, 140.01999981701374, 378.4050000831485, 179.63500041514635, 273.7900000065565, 220.13999987393618, 393.5350002720952, 39.42999988794327, 39.88999966531992, 47.8300005197525, 26.990000158548355, 212.08999957889318, 348.0249997228384, 167.0949999243021, 205.9199996292591, 135.51499973982573, 164.39499985426664, 51.72500014305115, 179.194999858737, 199.19500034302473, 54.97500021010637, 143.74000020325184, 168.4649996459484, 321.0999993607402, 240.7200001180172, 400.84500052034855, 27.290000580251217, 44.29499991238117, 21.3000001385808, 14.190000481903553, 9514.52500000596]"


example_output = list(map(float, example_output_str.strip('[]').split(', ')))

predicted_platform, probability, probabilities = predict_platform_with_prob(example_output)
print(f'Predicted Platform: {predicted_platform} Probability: {probability:.2f}%')

# To print probabilities for all classes
for i, prob in enumerate(probabilities):
    print(f'Platform: {platform_categories[i]} Probability: {prob * 100:.2f}%')
